name: Create branch & draft PR when issue is assigned

on:
  issues:
    types: [assigned]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  create_branch_and_pr:
    if: ${{ github.event.issue.state == 'open' && github.event.issue.assignee != null }}
    runs-on: ubuntu-latest
    steps:
      - name: Prepare branch name
        id: prep
        run: |
          TITLE="${{ github.event.issue.title }}"
          NUM="${{ github.event.issue.number }}"
          SLUG=$(printf "%s" "$TITLE" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9]+/-/g; s/^-+|-+$//g')
          BRANCH="issue/${NUM}-${SLUG}"
          echo "branch_name=${BRANCH}" >> $GITHUB_OUTPUT

      - name: Create branch and draft PR
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const owner = context.repo.owner;
            const repo  = context.repo.repo;

            const defaultBranch = context.payload.repository.default_branch;
            const branchName = "${{ steps.prep.outputs.branch_name }}";

            // Get latest commit SHA of default branch
            const baseRef = await github.rest.git.getRef({
              owner, repo, ref: `heads/${defaultBranch}`,
            });
            const baseSha = baseRef.data.object.sha;

            // Create branch if not already present
            try {
              await github.rest.git.createRef({
                owner, repo,
                ref: `refs/heads/${branchName}`,
                sha: baseSha,
              });
            } catch (e) {
              if (e.status !== 422) throw e; // ignore "already exists"
            }

            // Create draft PR if not already present
            let pr;
            try {
              pr = await github.rest.pulls.create({
                owner, repo,
                head: branchName,
                base: defaultBranch,
                title: `WIP: #${issue.number} ${issue.title}`,
                body: `This PR tracks work for #${issue.number}.\n\nCloses #${issue.number}.`,
                draft: true,
              });
            } catch (e) {
              if (e.status === 422) {
                const prs = await github.rest.pulls.list({
                  owner, repo, state: 'open', head: `${owner}:${branchName}`, base: defaultBranch,
                });
                if (prs.data.length) {
                  pr = { data: prs.data[0] };
                } else {
                  throw e;
                }
              } else {
                throw e;
              }
            }

            const branchUrl = `https://github.com/${owner}/${repo}/tree/${encodeURIComponent(branchName)}`;
            const prUrl = pr.data.html_url;

            const body = [
              `Branch created: ${branchUrl}`,
              `Draft PR: ${prUrl}`
            ].join('\n');

            await github.rest.issues.createComment({
              owner, repo,
              issue_number: issue.number,
              body,
            });
